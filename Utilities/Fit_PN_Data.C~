#include <vector>
//#include "DataFormats/Math/interface/deltaR.h"
#include <iostream>
#include <cmath>
#include <algorithm>
//float dr1 = deltaR(GENlep_eta->at(r),GENlep_phi->at(r), lep_eta->at(j), lep_phi->at(j));


double Start=50;
double End=150;
int bin=50;
int bin1 = 16;
double l=74;
double u=106;
double s = 250;

int PN_idx = 10; //number possibile fitting coefficinets

static const std::vector<string> functions {"pol","Cebysev","DF","MDF","PPF", "PEF", "UA2F"};

static const std::vector<float> PN_scores {0.83226, 0.949388, 0.981101};

int PN_DIM =  PN_scores.size(); //number of PN-MD score bins

static const std::vector<float> DDX_scores {0.0365136, 0.127416, 0.286469};

int DDX_DIM =  DDX_scores.size(); //number of DDX score bins

string Cebysev(int n){

  stringstream ss;

  string T[PN_idx];
  T[0] = "1";
  T[1] = "x";
  T[2] = "2*x^(2)-1";
  T[3] = "4*x^(3)-3*x";
  T[4] = "8*x^(4)-8*x^(2)+1";
  T[5] = "16*x^(5)-20*x^(3)+5*x";
  T[6] = "32*x^(6)-48*x^(4)+18*x^(2)-1";
  T[7] = "64*x^(7)-112*x^(5)+56*x^(3)-7*x";
  T[8] = "128*x^(8)-256*x^(6)+160*x^(4)-32*x^(2)+1";
  T[9] = "256*x^(9)-576*x^(7)+432*x^(5)-120*x^(3)+9*x";

  for(int i=0; i<n+1; i++){
    string s2;
    if(i==0){s2="[0]";}
    else{s2="+["+ std::to_string(i)+ "]*("+T[i]+")";}
    ss <<s2;
  }
  std::string str2 = ss.str();

  return str2;

}



string DF(int n){
  stringstream ss;

  if(n==0){
    string r= "[0]";
    return r;
  }

  if(n==1){
    string r= "[0]*(1-x)^([1])";
    return r;
  }


  
  for(int i=2; i<n+1; i++){
    string s2;
    if(i==2){s2="[2]";}
    else{s2="+["+ std::to_string(i)+ "]*log(x)^("+std::to_string(i-2)+ ")";}
    ss <<s2;
  }
  std::string str2 = ss.str();

  string t= "[0]*(1-x)^([1])*x^(-(" + str2 + "))";

  return t;

}

string MDF(int n){
  stringstream ss;

  if(n==0){
    string r= "[0]";
    return r;
  }

  if(n==1){
    string r= "[0]*(1-x)^([1]/3)";
    return r;
  }


  
  for(int i=2; i<n+1; i++){
    string s2;
    if(i==2){s2="[2]";}
    else{s2="+["+ std::to_string(i)+ "]*log(x)^("+std::to_string(i-2)+ ")";}
    ss <<s2;
  }
  std::string str2 = ss.str();

  string t= "[0]*(1-x)^([1]/3)*x^(-(" + str2 + "))";

  return t;

}


string pol(int n){
  stringstream ss;
  
  for(int i=0; i<n+1; i++){
    string s;
    if(i==0){s="[0]";}
    else{s="+["+ std::to_string(i)+ "]*x^("+ std::to_string(i)+ ")";}
    ss <<s;
  }
std::string str2 = ss.str();
  return str2;

}

string PPF(int n){
  stringstream ss;

  if(n==0){
    string r= "[0]";
    return r;
  }

  if(n==1){
    string r= "[0]*(1+x)^(-[1])";
    return r;
  }


  
  for(int i=2; i<n+1; i++){
    string s2;
    if(i==2){s2="1+[2]*x";}
    else{s2="+["+ std::to_string(i)+ "]*x^("+std::to_string(i-1)+ ")";}
    ss <<s2;
  }
  std::string str2 = ss.str();

  string t= "[0]*(" + str2 + ")^(-[1])";

  return t;

}

string PEF(int n){
  stringstream ss;
  if(n==0){
    string r= "[0]";
    return r;
  }
  if(n==1){
    string r= "[0]*((1-x)^([1]))";
    return r;
  }
  if(n==2){
    string r= "[0]*((1-x)^([1]))*x^(-[2])";
    return r;
  }
  if(n==3){
    string r= "[0]*((1-x)^([1]))*x^(-([2]+[3]*log(x)))";
    return r;
  }
    
  for(int i=4; i<n+1; i++){
    string s2;
    if(i==4){s2="1+[4]*x";}
    else{s2="+["+ std::to_string(i)+ "]*x^("+std::to_string(i-3)+ ")";}
    ss <<s2;
  }
  std::string str2 = ss.str();

  string t= "[0]*((1-x)^([1]))*x^(-([2]+[3]*log(x)))*(" + str2 + ")";
  return t;

}

string UA2F(int n){
  stringstream ss;
  if(n==0){
    string r= "[0]";
    return r;
  }
  if(n==1){
    string r= "[0]*(x)^(-[1])";
    return r;
  }

  for(int i=2; i<n+1; i++){
    string s2;
    if(i==2){s2="[2]*x";}
    else{s2="+["+ std::to_string(i)+ "]*x^("+std::to_string(i-1)+ ")";}
    ss <<s2;
  }
  std::string str2 = ss.str();

  string t= "[0]*(x)^(-[1])*exp(-(" + str2 + "))";
  return t;

}

void Fit_PN_Data(){
  gStyle->SetOptStat(0);
  gStyle->SetOptFit(0);

  //gStyle->SetOptStat(1000000001);
  //gStyle->SetOptFit(1111);

  TH1::AddDirectory(kFALSE); 
  
  TFile *f;
  f = TFile::Open("Data_histos.root","read");
  

  //histogams sidebands

  //PN-MD softdropmass histograms
  TH1F *PN_Data[PN_DIM];
  
  for(int iPN=0; iPN<PN_DIM;iPN++){
    std::string nomestringa{"PNhist"+std::to_string(iPN)};
    const char * nome{nomestringa.c_str()};
    PN_Data[iPN] = (TH1F*)f->Get(nome);
  }
  
  //DDX softdropmass histograms
  TH1F *DDX_Data[PN_DIM];
  
  for(int iPN=0; iPN<DDX_DIM;iPN++){
    std::string nomestringa{"DDXhist"+std::to_string(iPN)};
    const char * nome{nomestringa.c_str()};    
    DDX_Data[iPN]= (TH1F*)f->Get(nome);
  }

  f->Close();
  delete f;

  //Fit procedure

  vector<vector<float>> Chi2( PN_DIM,vector<float>(PN_idx,-10000));
  vector<vector<float>> fisher( PN_DIM,vector<float>(PN_idx-1,-1));
  vector<vector<float>> Chi2_N( PN_DIM,vector<float>(PN_idx,-10000));
  vector<float> par(PN_idx);
  vector<float> parerr(PN_idx);

  int np=(int)(bin-bin1);
  cout<< np<<endl;  

  TString fname= "./Plots/PN_Fit.pdf";
  auto canv = new TCanvas("Canvas", "Canvas", 1500, 600);  
  canv->cd();
  canv->Print(fname+"[");

  for(int j=0; j<functions.size();j++){
    std::string filestring1{"rootfiles/PN_"+functions.at(j)+".root"};
    const char * filename1{filestring1.c_str()};
    TFile *myfile;
    myfile = TFile::Open(filename1,"RECREATE");

    myfile->cd();
    //create directories in each root file for each order of the fitting function
    for(int ju=0; ju<PN_idx; ju++){
      std::string dirstring{std::to_string(ju)+"parameters"};
      const char * dirname{dirstring.c_str()};
      myfile->mkdir(dirname);
    }

    for(int i=0;i<PN_DIM;i++){   
       canv->cd();
       canv->SetLogy(); 
       gPad->SetLeftMargin(0.15);

       if(i==0){par[0]=  400;}
	 



  //saving histograms in a Tfile
  /*
  TFile *myfile;
  myfile = TFile::Open("Data_histos.root","RECREATE");
  myfile->cd();

  for(int i=0; i<PN_DIM;i++){
    PN_Data[i]->Write();
    PN_Data_s[i]->Write();
  }

  for(int i=0; i<DDX_DIM;i++){
    DDX_Data[i]->Write();
    DDX_Data_s[i]->Write();
  }

  myfile->Close();
  delete myfile;
  */
  //plot histograms
  
}
